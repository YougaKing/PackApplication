class CollectTaskTimeListener implements TaskExecutionListener, BuildListener {

    private long singleTaskTime                 //用于记录每个task执行所花的时间
    private long allTaskTime = System.currentTimeMillis()   //用于记录所有task执行所花的时间
    private def timings = new HashMap<String, Long>() //存储所有task和其所发时间的对应关系

    //每个task执行之前调用
    @Override
    void beforeExecute(Task task) {
        singleTaskTime = System.currentTimeMillis()
    }

    //每个task执行后调用
    @Override
    void afterExecute(Task task, TaskState state) {
        long ms = System.currentTimeMillis() - singleTaskTime
        timings.put(task.path, ms)
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    //build结束时调用 (所有task结束时调用)
    @Override
    void buildFinished(BuildResult result) {
        //输出统计数据
        outputHeader("Task timings(no sort): ")
        outputProfile(timings.iterator())
        //输出排序后的统计数据
        outputHeader("Task timings(sorted): ")
        outputProfile(sortProfileData(timings).iterator())
        println("\n")
        uploadReport()
    }

    void outputHeader(String headerMessage) {
        println("\n======================================================")
        println(headerMessage)
    }

    //输出收集的数据
    void outputProfile(Iterator<Map.Entry<String, Long>> it) {
        for (entry in it) {
            printf("%-50s  %-15s\n", entry.key, entry.value + "ms")
        }
    }

    //对task所花费的时间进行排序
    List<Map<String, Long>> sortProfileData(Map<String, Long> profileData) {
        List<Map.Entry<String, Long>> data = new ArrayList<>()
        for (timing in profileData) data.add(timing)
        Collections.sort(data, new Comparator<Map.Entry<String, Long>>() {
            @Override
            int compare(Map.Entry<String, Long> o1, Map.Entry<String, Long> o2) {
                if (o1.value > o2.value) return 1
                else if (o1.value < o2.value) return -1
                return 0
            }
        })
        return data
    }

    //将收集的数据上传到服务器做分析
    //io.github.http-builder-ng:http-builder-ng-core:1.0.3
    void uploadReport() {
        long ms = System.currentTimeMillis() - allTaskTime
        outputHeader("all task time : " + ms)

//        HttpBuilder.configure {
//            request.uri = "http://10.249.23.72:8080"
//        }.postAsync {
//            request.uri.path = '/time'
//            request.body = ['timings': timings, 'user.name': System.getProperty("user.name"), "total_time": start.timeInMs]
//            request.contentType = 'application/json'
//            response.success { formServer, body -> //body => groovy.json.internal.LazyMap  (服务端相应类型Content-Type为application/json)
//                println "POST Success: ${formServer.statusCode}, ${formServer.message}, ${body.getClass()}; code=${body.get('code')}, message=${body.get('message')}"
//            }
//            response.failure { formServer, errorMessage -> //errorMessage => byte[]
//                println "POST Failure: ${formServer.statusCode}, ${formServer.message}, errorMessage=${new String(errorMessage)}"
//            }
//        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}
}

//添加自定义的监听
gradle.addListener(new CollectTaskTimeListener())